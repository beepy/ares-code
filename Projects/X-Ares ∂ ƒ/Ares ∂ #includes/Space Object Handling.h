/*Ares, a tactical space combat game.Copyright (C) 1997, 1999-2001, 2008 Nathan LamontThis program may be used, mofified, and redistributed either under the termsof the GNU General Public License version 2 or the GNU Lesser General PublicLicense version 3. See `LICENSE.md` for details.*/// Space Object Handling.h#ifndef kSpaceObject#include "Space Object.h"#endif#pragma options align=mac68k#define	kBaseObjectResType		'bsob'#define	kBaseObjectResID		500#define	kObjectActionResType	'obac'#define	kObjectActionResID		500#define	mFindSpaceObjectByID( object, counter, idnum)\				(object) = ( spaceObjectType *)*gSpaceObjectData;\				(counter) = 0;\				while (( (counter) < kMaxSpaceObject) && ( (object)->id != (idnum)))\				{\					(object)++;\					(counter)++;\				}\				if ( (counter) == kMaxSpaceObject) (object) = nil;				//#define	CreateAnySpaceObject( mwhichBase, mvel, mloc, mdir, mowner, mspecial, mcanbuild, mnameres, mnamestr, msprite)\//DebugCreateAnySpaceObject( mwhichBase, mvel, mloc, mdir, mowner, mspecial, mcanbuild, mnameres, mnamestr, msprite, __FILE__, __LINE__)//#define ExecuteObjectActions( mwhich, mnum, msobj, mdobj, moffset)\//DebugExecuteObjectActions( mwhich, mnum, msobj, mdobj, moffset, __FILE__, __LINE__)int SpaceObjectHandlingInit( void);void CleanupSpaceObjectHandling( void);void ResetAllSpaceObjects( void);void ResetActionQueueData( void);int AddSpaceObject( spaceObjectType *);//int AddSpaceObject( spaceObjectType *, long *, short, short);int AddNumberedSpaceObject( spaceObjectType *, long);void RemoveAllSpaceObjects( void);void CorrectAllBaseObjectColor( void);void InitSpaceObjectFromBaseObject( spaceObjectType *, long, short, long, fixedPointType *, long,									short);void ChangeObjectBaseType( spaceObjectType *, long, long, Boolean);void AddActionToQueue( objectActionType *, long, long, long, spaceObjectType *,						spaceObjectType *, longPointType *);void ExecuteActionQueue( long);void ExecuteObjectActions( long, long, spaceObjectType *, spaceObjectType *, longPointType *, Boolean);void DebugExecuteObjectActions( long, long, spaceObjectType *, spaceObjectType *, longPointType *, char *, long);//long CreateAnySpaceObject( long, fixedPointType *, coordPointType *, long, long, unsigned long,//							long *, short, short, short);long CreateAnySpaceObject( long, fixedPointType *, coordPointType *, long, long, unsigned long,							short);long DebugCreateAnySpaceObject( long, fixedPointType *, coordPointType *, long, long, unsigned long,							long *, short, short, short, char *, long);long CountObjectsOfBaseType( long, long);long GetNextObjectWithAttributes( long, unsigned long, Boolean);void ResolveSpaceObjectData( Handle);void ResolveObjectActionData( Handle);void ResolveActionQueueData( Handle);void AlterObjectHealth( spaceObjectType *, long);void AlterObjectEnergy( spaceObjectType *, long);void AlterObjectBattery( spaceObjectType *, long);void AlterObjectOwner( spaceObjectType *, long, Boolean);void AlterObjectOccupation( spaceObjectType *, long, long, Boolean);void AlterObjectCloakState( spaceObjectType *, Boolean);void DestroyObject( spaceObjectType *);void ActivateObjectSpecial( spaceObjectType *);void CreateFloatingBodyOfPlayer( spaceObjectType *);#pragma options align=reset