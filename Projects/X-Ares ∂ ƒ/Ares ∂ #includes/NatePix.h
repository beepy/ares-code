/*Ares, a tactical space combat game.Copyright (C) 1997, 1999-2001, 2008 Nathan LamontThis program may be used, mofified, and redistributed either under the termsof the GNU General Public License version 2 or the GNU Lesser General PublicLicense version 3. See `LICENSE.md` for details.*//* NATEPIX.H */typedef unsigned char	colorByte;typedef	unsigned char	byte;#pragma options align=mac68ktypedef struct {	PixMapHandle	pix;	Handle			pixBase;	Point			center;	} natePix;typedef struct {	BitMap			bit;	Handle			bitBase;	Point			center;	} nateBit;#define	kNatePix/* typedef of BitMap (I-144):typedef struct {	baseAddr		Ptr;	(should be set to *bitBlock)	rowBytes		int;	(holds correct row width in bytes - no mask)	bounds			Rect;	(should be same as PixMap's)	} BitMap;		typedef of PixMap (V-53-54):typedef *PixMapPtr	PixMapHandle;typedef *PixMap		PixMapPtr;typedef struct {	baseAddr		Ptr;	(should be set to *pixBlock)	rowBytes		int;	(must be ORed with ROW_BYTES_MASK for PixMap)	bounds			Rect;	(should be same is BitMap's)	pmVersion		int;	( = 0)	packType		int;	( = 0)	packSize		int;	( = 0)	hRes			Fixed;	( = 72)	vRes			Fixed;	( = 72)	pixelType		int;	( = 0)	pixelSize		int;	( = 8)	cmpCount		int;	( = 1)	cmpSize			int;	( = 8)	planeBytes		long;	( = 0)	pmTable			CTabHandle;	(first dispose the pmTable which is auto-								matically allocated to a new PixMap, then								assign its pmTable = GetCTable( CTABLE_ID))	pmReserved		long;	( = 0)*/#pragma options align=reset