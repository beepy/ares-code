unit ICKeys;(* ¥¥¥Start Header¥¥¥ *)(* File:         ICKeys.p * Generated by: 1.0d5 * For:          IC 1.4 * On:           Sunday, 14 September 1997, 21:17:55 *  * This file is part of the Internet Configuration system and * is placed in the public domain for the benefit of all. *)(* ¥¥¥End Header¥¥¥ *)interface	uses{$ifc undefined THINK_Pascal}		Types, Files, QuickDraw,{$endc}		AppleTalk, Aliases;	const(* ¥¥¥Start ICKeys.p¥¥¥ *)    kICRealName = 'RealName';  (* PString -- real name of user *)    kICEmail = 'Email';  (* PString -- user@host.domain, email address of user, ie return address *)    kICMailAccount = 'MailAccount';  (* PString -- user@host.domain, account from which to fetch mail *)    kICMailPassword = 'MailPassword';  (* PString -- scrambled, password for MailAccount *)    kICNewsAuthUsername = 'NewsAuthUsername';  (* PString -- user name for authorised news servers *)    kICNewsAuthPassword = 'NewsAuthPassword';  (* PString -- scrambled, password for NewsAuthUsername *)    kICArchiePreferred = 'ArchiePreferred';  (* PString -- formatted, preferred Archie server *)    kICArchieAll = 'ArchieAll';  (* STR# -- formatted, list of Archie servers *)    kICUMichPreferred = 'UMichPreferred';  (* PString -- formatted, preferred UMich server *)    kICUMichAll = 'UMichAll';  (* STR# -- formatted, list of UMich servers *)    kICInfoMacPreferred = 'InfoMacPreferred';  (* PString -- formatted, preferred Info-Mac server *)    kICInfoMacAll = 'InfoMacAll';  (* STR# -- formatted, list of Info-Mac servers *)    kICPhHost = 'PhHost';  (* PString -- host.domain, default Ph server *)    kICWhoisHost = 'WhoisHost';  (* PString -- host.domain, default whois server *)    kICFingerHost = 'FingerHost';  (* PString -- host.domain, default finger server *)    kICFTPHost = 'FTPHost';  (* PString -- host.domain, default FTP server *)    kICTelnetHost = 'TelnetHost';  (* PString -- host.domain, default Telnet address *)    kICSMTPHost = 'SMTPHost';  (* PString -- host.domain, SMTP server *)    kICNNTPHost = 'NNTPHost';  (* PString -- host.domain, NNTP server *)    kICGopherHost = 'GopherHost';  (* PString -- host.domain, default Gopher server *)    kICLDAPServer = 'LDAPServer';  (* PString -- host.domain *)    kICLDAPSearchbase = 'LDAPSearchbase';  (* PString -- string LDAP thing *)    kICWWWHomePage = 'WWWHomePage';  (* PString -- URL, users default WWW page *)    kICWAISGateway = 'WAISGateway';  (* PString -- no idea *)    kICListFont = 'ListFont';  (* ICFontRecord -- font used for lists of items (eg news article lists) *)    kICScreenFont = 'ScreenFont';  (* ICFontRecord -- font used for monospaced text (eg news articles) *)    kICDocumentFont = 'DocumentFont';  (* ICFontRecord -- font used for proportional text *)    kICPrinterFont = 'PrinterFont';  (* ICFontRecord -- font used to print ScreenFont *)    kICDownloadFolder = 'DownloadFolder';  (* ICFileSpec -- where to put newly downloaded files *)    kICSignature = 'Signature';  (* TEXT -- append to news and mail messages *)    kICOrganization = 'Organization';  (* PString -- for X-Organization string *)    kICPlan = 'Plan';  (* TEXT -- default response for finger servers *)    kICQuotingString = 'QuotingString';  (* PString -- used to quote responses in news and mail *)    kICMailHeaders = 'MailHeaders';  (* TEXT -- extra headers for mail messages *)    kICNewsHeaders = 'NewsHeaders';  (* TEXT -- extra headers for news messages *)    kICMapping = 'Mapping';  (* ICMapEntries -- file type mapping, see documentation *)    kICCharacterSet = 'CharacterSet';  (* ICCharTable -- Mac-to-Net and Net-to-Mac character translation *)    kICHelper = 'Helper¥';  (* ICAppSpec -- helpers for URL schemes *)    kICServices = 'Services';  (* ICServices -- TCP and IP port-to-name mapping *)    kICNewMailFlashIcon = 'NewMailFlashIcon';  (* Boolean -- how to announce new mail *)    kICNewMailDialog = 'NewMailDialog';  (* Boolean *)    kICNewMailPlaySound = 'NewMailPlaySound';  (* Boolean *)    kICNewMailSoundName = 'NewMailSoundName';  (* PString *)    kICWebBackgroundColour = 'WebBackgroundColour';  (* RGBColor -- background colour for web pages *)    kICNoProxyDomains = 'NoProxyDomains';  (* STR# -- list of domains not to be proxied *)    kICUseSocks = 'UseSocks';  (* Boolean *)    kICSocksHost = 'SocksHost';  (* PString -- host.domain, remember that host.domain format allows ":port" and " port" *)    kICUseHTTPProxy = 'UseHTTPProxy';  (* Boolean *)    kICHTTPProxyHost = 'HTTPProxyHost';  (* PString -- host.domain *)    kICUseGopherProxy = 'UseGopherProxy';  (* Boolean *)    kICGopherProxy = 'GopherProxy';  (* PString -- host.domain, see note in Prog Docs *)    kICUseFTPProxy = 'UseFTPProxy';  (* Boolean *)    kICFTPProxyHost = 'FTPProxyHost';  (* PString -- host.domain *)    kICFTPProxyUser = 'FTPProxyUser';  (* PString -- first level FTP proxy authorisation *)    kICFTPProxyPassword = 'FTPProxyPassword';  (* PString -- scrambled, password for FTPProxyUser *)    kICFTPProxyAccount = 'FTPProxyAccount';  (* PString -- second level FTP proxy authorisation *)    kICUsePassiveFTP = 'UsePassiveFTP';  (* Boolean -- use PASV command for FTP transfers *)    kICSnailMailAddress = 'SnailMailAddress';  (* TEXT -- preferred mailing address *)    kICMacSearchHost = 'MacSearchHost';  (* PString -- host for MacSearch queries *)    kICWebSearchPagePrefs = 'WebSearchPagePrefs';  (* PString -- URL, users default search page *)(* ¥¥¥End ICKeys.p¥¥¥ *){$PUSH}{$ALIGN MAC68K}	type		ICFontRecord = record				size: integer;				face: Style;				font: Str255;			end;		ICFontRecordPtr = ^ICFontRecord;		ICFontRecordHandle = ^ICFontRecordPtr;		ICCharTable = record				net_to_mac: packed array[char] of char;				mac_to_net: packed array[char] of char;			end;		ICCharTablePtr = ^ICCharTable;		ICCharTableHandle = ^ICCharTablePtr;		ICAppSpec = record				fCreator: OSType;				name: Str63;			end;		ICAppSpecPtr = ^ICAppSpec;		ICAppSpecHandle = ^ICAppSpecPtr;		ICFileInfo = record				fType: OSType;				fCreator: OSType;				name: Str63;			end;		ICFileInfoPtr = ^ICFileInfo;		ICFileInfoHandle = ^ICFileInfoPtr;		ICFileSpec = record				vol_name: Str31;				vol_creation_date: longint;				fss: FSSpec;					(* vRefNum field is of no value *)				alias: AliasRecord; 	(* plus extra data, aliasSize 0 means no alias manager present when ICFileSpecification was created *)			end;		ICFileSpecPtr = ^ICFileSpec;		ICFileSpecHandle = ^ICFileSpecPtr;	const		ICfile_spec_header_size = sizeof(ICFileSpec) - sizeof(AliasRecord);	type		ICMapEntry = record				total_length: integer;			(* from beginning of record *)				fixed_length: integer;			(* from beginning of record *)				version: integer;				file_type: OSType;				file_creator: OSType;				post_creator : OSType;				flags: longint;				(* variable part starts here *)				extension: Str255;					(* these strings are tightly packed *)				creator_app_name: Str255;		(* which means, these ones might have an *)				post_app_name : Str255;			(* odd address *)				MIME_type: Str255;									entry_name: Str255;			end;		ICMapEntryPtr = ^ICMapEntry;		ICMapEntryHandle = ^ICMapEntryPtr;	const		(* bits and masks for the flags of the ICMapEntry *)		ICmap_binary_bit = 0;					(* file should be transfered in binary as opposed to text mode *)		ICmap_binary_mask = $00000001;		ICmap_resource_fork_bit = 1;		(* the resource fork of the file is significant *)		ICmap_resource_fork_mask = $00000002;		ICmap_data_fork_bit = 2;				(* the data fork of the file is significant *)		ICmap_data_fork_mask = $00000004;		ICmap_post_bit = 3;							(* post process using post fields *)		ICmap_post_mask = $00000008;		ICmap_not_incoming_bit = 4;			(* ignore this mapping for incoming files *)		ICmap_not_incoming_mask = $00000010;		ICmap_not_outgoing_bit = 5;			(* ignore this mapping for outgoing files *)		ICmap_not_outgoing_mask = $00000020;		ICmap_fixed_length = 22;				(* number in fixed_length field *)			type		ICServiceEntry = record				name: Str255;						(* this strings is tightly packed *)				port: integer;						(* which means, these fields might have an *)				flags: integer;						(* odd address *)			end;		ICServiceEntryPtr = ^ICServiceEntry;		ICServiceEntryHandle = ICServiceEntryPtr;		ICServices = record				count: integer;				services: array[1..1] of ICServiceEntry;		(* this array is packed, so you can't index it directly *)			end;		ICServicesPtr = ^ICServices;		ICServicesHandle = ^ICServicesPtr;	const		(* bits and masks for the flags of the ICServiceEntry *)		ICservices_tcp_bit = 0;				(* this is a TCP service *)		ICservices_tcp_mask = $00000001;		ICservices_udp_bit = 1;				(* this is a UDP service *)		ICservices_udp_mask = $00000002;		(* both bits can be set, which means the service is both TCP and UDP, eg daytime *){$ALIGN RESET}{$POP}{$ifc not undefined THINK_Pascal}implementation{$endc}end. (* ICKeys *)