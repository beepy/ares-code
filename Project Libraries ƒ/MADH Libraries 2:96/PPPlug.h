#ifndef __PPPLUGH__#define __PPPLUGH__#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#else#if !defined(THINK_C)#pragma options align=mac68k#endif#endif/********************						***********************/////	Player PRO 4.5x -- Plugs FILTERS Definition & Plugs DIGITAL EDITOR Definition////	Version 3.0////	To use with PlayerPRO & CodeWarrior ( current vers 7.1)////	Antoine ROSSET//	16 Tranchees//	1206 GENEVA//	SWITZERLAND//	//	FAX:			(+41 22) 346 11 97//	Compuserve:		100277,164//	Internet: 		rosset@dial.eunet.ch////	*****************	FILTERS FOR SAMPLES	***********************/////	Your main function have to be in this form://	OSErr main( 	sData					*theData,					// Sample informations, see MAD.h//					long					SelectionStart,				// SelectionStart //					long					SelectionEnd,				// SelectionEnd, your filter SHOULD apply his effect only on the selection//					PPInfoPlug				*thePPInfoPlug)				// Some functions of PlayerPRO that you can use in your plugs//////	*****************						***********************/////	If you want to reallocate theData or theData->data://	//	if( theData->data != 0L) DisposPtr( theData->data);		// VERY IMPORTANT to free memory//	theData->data = NewPtr( newsize);						// Use NewPtr ONLY to allocate memory!//	//	theData->size = newsize;								// In bytes !! Even for 16 bits !//	//	Don't forget to UPDATE the theData->size !!!!!!!!!!!!////	*****************						***********************/////	About Resources:////	Your Plug should have: Creator: 'SNPL', Type: 'PLug'////	Your Plug have to have these resources:////	- One resource CODE 1000 with 68k Code  ** You should NOT use the 68881 coprocessor **//	- One resource PPCC 1000 with PPC Code  (OPTIONAL: if PlayerPRO PPC version cannot find it, it will use the CODE 1000 68k resource)//	- One STR# resource :////		1 string: Menu Name (see Instrument window in PlayerPRO)///********************						***********************/typedef struct{	void		*RPlaySoundUPP;			//	OSErr			RPlaySound( Ptr whichSound, long SoundSize, long whichTrack, long Period, long Amplitude, long loopStart, long loopLength)	void		*UpdateALLWindowUPP;	//	void			UpdateALLWindow( void)	void		*MyDlgFilterUPP;		//	pascal Boolean	MyDlgFilter( DialogPtr theDlg, EventRecord *theEvt, short *itemHit)	} PPInfoPlug;typedef OSErr			(*RPlaySoundUPP)		( Ptr, long, long, long, long, long, long);typedef void			(*UpdateALLWindowUPP)	( void);typedef pascal Boolean	(*MyDlgFilterUPP)		( DialogPtr, EventRecord*, short*);#if defined(powerc) || defined(__powerc)#include "mixedmode.h"		/****** POWERPC calls *********/#define 		RPlaySoundCallMode (	kCStackBased|\				RESULT_SIZE( SIZE_CODE( sizeof(OSErr) ))|\				STACK_ROUTINE_PARAMETER( 1, SIZE_CODE( sizeof( Ptr)))|\				STACK_ROUTINE_PARAMETER( 2, SIZE_CODE( sizeof( long)))|\				STACK_ROUTINE_PARAMETER( 3, SIZE_CODE( sizeof( long)))|\				STACK_ROUTINE_PARAMETER( 4, SIZE_CODE( sizeof( long)))|\				STACK_ROUTINE_PARAMETER( 5, SIZE_CODE( sizeof( long)))|\				STACK_ROUTINE_PARAMETER( 6, SIZE_CODE( sizeof( long)))|\ 				STACK_ROUTINE_PARAMETER( 7, SIZE_CODE( sizeof( long))))#define CallRPlaySoundUPP( v1, v2, v3, v4, v5, v6, v7)		\		CallUniversalProc( thePPInfoPlug->RPlaySoundUPP, RPlaySoundCallMode, v1, v2, v3, v4, v5, v6, v7)/**/#define UpdateALLWindowCallMode (	kCStackBased)#define CallUpdateALLWindowUPP()		\		CallUniversalProc( thePPInfoPlug->UpdateALLWindowUPP, UpdateALLWindowCallMode)/**/#else	/******** 68K calls ***********/#define CallRPlaySoundUPP( v1, v2, v3, v4, v5, v6, v7)		\		(* (RPlaySoundUPP) (thePPInfoPlug->RPlaySoundUPP))( v1, v2, v3, v4, v5, v6, v7)/**/#define CallUpdateALLWindowUPP()		\		(* (UpdateALLWindowUPP) (thePPInfoPlug->UpdateALLWindowUPP))/**/#endif/********************						***********************/////// RPlaySoundUPP	: See Developper Toolkit documentation. Play a SoundPtr at a specific Period by using PlayerPRO Driver.// UpdateALLWindow	: Check all PlayerPRO windows and update them if need it.// MyDlgFilterUPP	: to use with a ModalDialog function: allow movable dialog, PlayerPRO windows updating, Item 1 Frame, Copy/Paste support, Key support/////********************						***********************//******************************************************************///******************* DIGITAL EDITOR PLUGS  ***********************/////	Your main function have to be in this form://	OSErr main( 	Ptr						*Pcmd,						// Digital Selection//					PPInfoPlug				*thePPInfoPlug)				// Some functions of PlayerPRO that you can use in your plugs//////	*****************						***********************/////	If you want to reallocate Pcmd://	//	if( Pcmd != 0L) DisposPtr( (Ptr) Pcmd);							// VERY IMPORTANT//	Pcmd = NewPtrClear( sizeof( Pcmd) + noCell * sizeof( Cmd));		// Use NewPtr ONLY to allocate memory!////	myPcmd->structSize 	= sizeof( Pcmd) + noCell * sizeof( Cmd);//	//	Don't forget to UPDATE the myPcmd->structSize !!!!!!!!!!!!////	*****************						***********************/////	About Resources:////	Your Plug should have: Creator: 'SNPL', Type: 'PPDG'////	Your Plug have to have these resources:////	- One resource CODE 1000 with 68k Code  ** You should NOT use the 68881 coprocessor **//	- One resource PPCC 1000 with PPC Code  (OPTIONAL: if PlayerPRO in PPC cannot find it, it will use the CODE 1000 resource)//	- One STR# resource :////		1 string: Menu Name (see Button in Digital Editor window in PlayerPRO)///********************						***********************/typedef struct{	short			tracks;					// number of tracks in myCmd[]	short			length;					// number of rows in myCmd[]	short			trackStart;				// track ID of first track in myCmd[]	short			posStart;				// row ID of first row in myCmd[]	long			structSize;				// struct size in bytes - see Definition	Cmd				myCmd[];} Pcmd;#if defined(powerc) || defined (__powerc)#pragma options align=reset#else#if !defined(THINK_C)#pragma options align=reset#endif#endif#endif