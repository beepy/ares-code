/********************						***********************/////	Player PRO 4.5x -- MAD Music Driver Definition////	Library Version 4.01////	To use with MusicLibrary for Think C & CodeWarrior////	Antoine ROSSET//	16 Tranchees//	1206 GENEVA//	SWITZERLAND//	//	FAX:			(+41 22) 346 11 97//	PHONE: 			(+41 89) 203 74 62//	Compuserve:		100277,164//	Internet: 		rosset@dial.eunet.ch///********************						***********************/#ifndef __RDRIVERH__#define __RDRIVERH__#ifndef __MADH__#include "MAD.h"#endif#ifndef __SOUND__#include <Sound.h>#endif#ifndef __RETRACE__#include <Retrace.h>#endif#if defined(powerc) || defined (__powerc)#pragma options align=mac68k#else#if !defined(THINK_C)#pragma options align=mac68k#endif#endif/********************						***********************//*** 			   		 Define List							***//********************						***********************/#define NUMBER_NOTES		96#define NOFINETUNE			8363#define MIN_VOLUME			0#define MAX_VOLUME			64#define MAXTRACK			32#define MAXINSTRU			64#define	MAXSAMPLE			20#define MAXPATTERN			200#define MAXPATTERNSIZE		900#define MAX_ARP 			3/********************						***********************//*** 			  		  Error messages 						***//********************						***********************/enum{	MADNeedMemory 					= -1,	MADReadingErr					= -2,	MADIncompatibleFile				= -3,	MADLibraryNotInitialized		= -4,	MADParametersErr				= -5,	MADUnknowErr					= -6,	MADSoundManagerErr				= -7,	MADOrderNotImplemented			= -8,	MADFileNotSupportedByThisPlug	= -9,	MADCannotFindPlug				= -10};/********************						***********************//*** 			   Channel structure definition					***//********************						***********************/struct Channel{		long		ID;					// Channel ID - 0 to 31		Ptr			begPtr;				// Sample Data Ptr - Beginning of data		Ptr			maxPtr;				// Sample Data Ptr - End of data		Ptr			curPtr;				// Sample Data Ptr - Current position		long		sizePtr;			// Sample Size in bytes				long		amp;				// Sample amplitude: 8 or 16 bits				long		loopBeg;			// Loop Beginning		long		loopSize;			// Loop Size				long		ins;				// Current Instrument ID		long		insOld;				// Previous Instrument ID played on this channel		long		samp;				// Current Sample ID				long		fineTune;			// Finetune				long		note;				// Note		long		noteOld;			// Previous note played on this channel				long 		period;				// Current period		long		periodOld;			// Previous period played on this channel				long		vol;				// Channel vol (0 to 64)		long 		cmd;				// Command		Byte		arg;				// Argument of command		Byte		volcmd;				// Volume Command				long 		arp[ MAX_ARP];		// Used for arpeggio command		long 		arpindex;			// Used for arpeggio command				long		viboffset;			// Used for vibrato command		long 		vibdepth;			// Used for vibrato command		long 		vibrate;			// Used for vibrato command				long 		slide;				// Used for slideUp and slideDown command				long 		pitchgoal;			// Used for portamento command		long 		pitchrate;			// Used for portamento command				long 		volumerate;			// Used for slideVolume command				long		oldArg[ 16];		Ptr			samplePtr;			// Used internaly by MADPlaySoundData & MADPlaySndHandle				/**/				Boolean		KeyOn;		short		a;		short		b;		short		p;		long		volEnv;		long		volFade;				long		lAC;};typedef		struct Channel	Channel;/********************						***********************//*** 		Music description - used in Import/Export filter	***//********************						***********************/struct	MADPartition{	MADSpec					*header;								// Music Header - See 'MAD.h'	PatData					*partition[ MAXPATTERN];				// Patterns	sData					*(sample[ MAXINSTRU][ MAXSAMPLE]);		// Instruments};typedef		struct MADPartition	MADPartition;/********************						***********************//*** 			     Driver Settings definition					***//********************						***********************/enum{	ASCSoundDriver = 1,	AWACSoundDriver,	MIDISoundDriver,	SoundManagerDriver,		// You should use only SoundManagerDriver for full compatibility !	QK21SoundDriver,	DigiDesignSoundDriver};enum{	MonoOutPut = 1,	StereoOutPut,	DeluxeStereoOutPut,	PolyPhonic				// Do NOT use it ! Standard hardware doesn't support it !};struct MADDriverSettings{	short					numChn;								// Active tracks from 2 to 32, automatically setup when a new music is loaded	short					outPutBits;							// 8 or 16 Bits	unsigned long			outPutRate;							// Fixed number, by example : rate44khz, rate22050hz, rate22khz, rate11khz, rate11025hz	short					outPutMode;							// MonoOutPut, StereoOutPut or DeluxeStereoOutPut ?	short					driverMode;							// ASCSoundDriver, AWACSoundDriver, MIDISoundDriver or SoundManagerDriver	Boolean					antiAliasing;						// Use AntiAliasing filter ? true/false	Boolean					repeatMusic;						// If music finished, repeat it or stop.	Boolean					sysMemory;							// Allocate memory in Application Heap (false) or in System Heap (true)	Boolean					Interpolation;						// Sound Interpolation active? true/false	Boolean					MicroDelay;							// Micro delay active? Used only in DeluxeStereoOutPut outPutMode.	long					MicroDelaySize;						// Micro delay duration (in ms, max 1 sec = 1000 ms)	Boolean					surround;							// Surround effect active? true/false};typedef struct MADDriverSettings MADDriverSettings;/********************						***********************//*** 			Informations about Plugs: ThePlug[]				***//********************						***********************/struct PlugInfo{	Handle		IOPlug;											// Plug CODE	Str63		MenuName;										// Plug name	Str63		AuthorString;									// Plug author	FSSpec		file;											// Location of plug file	OSType		type;											// OSType of file support	OSType		mode;											// Mode support : Import +/ Export	Boolean		hasPPCCode;										// Is Plug FAT?};typedef struct PlugInfo PlugInfo;/********************						***********************//*** 		Global structure : PlayerPRO variables				***//********************						***********************/struct MADDriverRec{	long					IDType;								// IDType = 'MADD' -- READ ONLY --	/**********************/	/** Public variables **/	/**********************/	MADDriverSettings		DriverSettings;						// Driver SetUp -- READ ONLY --	/**  Current music in memory, loaded with RLoadMusic() by example **/	MADSpec					*header;							// MAD Header  -- READ ONLY --	PatData					*partition[ MAXPATTERN];			// Patterns    -- READ ONLY --	sData					*(sample[ MAXINSTRU][ MAXSAMPLE]);	// Instruments -- READ ONLY --		/**  Drivers variables **/		Channel					chan[ MAXTRACK];					// Current driver channels -- READ ONLY --	Boolean					musicEnd;							// Is music playing finished? -- READ ONLY --	short					Tube[ MAXTRACK];					// Used in 'Tracks View' Window - View menu 	short					PartitionReader;					// Current position in pattern (0...64)	short					Pat;								// Current ID Pattern, see 'Patterns list'	short					PL;									// Current position in partition, see 'Partition list'	long					VolExt[ MAXTRACK];					// Volumes settings, see 'Adaptators' window	short					speed;								// Current speed, see speed Effect	short					finespeed;							// Current finespeed, see speed Effect	short					InstruTube[ MAXINSTRU];				// Used in 'Instrument View' Window - View menu	short					VExt;								// External music speed, see 'Adaptators' window	short					FreqExt;							// External music pitch, see 'Adaptators' window	Boolean					Reading;							// Reading indicator	short					LeftRight[ MAXTRACK];				// Left/Right % for Deluxe Driver	/** Plugs Import/Export variables **/	PlugInfo 				*ThePlug;							// Pointers on plugs code & infos	short					TotalPlug;							// no of Plugs in pointer ThePlug	/** Private variables - Not documented **/	/* DO NOT MODIFY OR USE these variables */	long					MIN_PITCH, MAX_PITCH;	short					smallcounter, trackDiv;	long					FREQBASE;	short					InstruActif[ MAXINSTRU];	Ptr						SysHeapPtr, Vol, IntDataPtr, OscilloWavePtr;	Boolean					JumpToNextPattern, endPattern;	long					ASCBUFFER;	long					BufSize;	long					VSYNC, BufCounter, BytesToGenerate;	short					vibrato_table[ 64];	short					MIDIPortRefNum;	SndChannelPtr 			pseudoChanAWAC;	short					InstuNoOld[ MAXTRACK];	short					NoteOld[ MAXTRACK];	short					VelocityOld[ MAXTRACK];	SndDoubleBufferHeader 	TheHeader;	SndChannelPtr 			MusicChannelPP;	Ptr						OverShoot;	long					*DASCBuffer;	short					*DASCBuffer8;	VBLTask					VBL;	long					VBLA5;	long					mytab[ 12];	long					MDelay;};typedef struct MADDriverRec MADDriverRec;extern	MADDriverRec		*MADDriver;/********************						***********************//*** 					   EFFECTS ID							***//********************						***********************/enum {		arpeggioE 		= 0,	//	0x00		downslideE 		= 1,	//	0x01		upslideE 		= 2,	//	0x02		portamentoE 	= 3,	//	0x03		vibratoE 		= 4,	//	0x04		portaslideE 	= 5,	//	0x05		vibratoslideE	= 6,	//	0x06		nothingE 		= 7,	//	0x07		offsetE 		= 9,	//	0x08		slidevolE 		= 10,	//	0x0A		fastskipE 		= 11,	//	0x0B		volumeE 		= 12,	//	0x0C		skipE 			= 13,	//	0x0D		extendedE 		= 14,	//	0x0E		speedE 			= 15	//	0x0F	};/********************						***********************//*** 					   FUNCTIONS							***//********************						***********************/#ifdef __cplusplusextern "C" {#endifOSErr	MADInitLibrary( Str255 PlugsFolderName);					// Library initialisation, you have to CALL this function if you want to use other functions & variablesOSErr	MADDisposeLibrary( void);									// Close Library, close music, close driver, free all memoryvoid	MADGetBestDriver( MADDriverSettings	*DriverInitParam);		// Found and identify the current Mac sound hardware and fill DriverInitParamOSErr	MADCreateDriver( MADDriverSettings	*DriverInitParam);		// Music Driver initialization and memory allocationOSErr	MADDisposeDriver();											// Dispose the music driver, use it after RInitMusic()OSErr	MADPlay( void);												// Play the current musicOSErr	MADStop( void);												// Stop the current musicOSErr	MADReset( void);											// Reset the current music at the start positionOSErr	MADLoadMusicFile( Str255 fName);							// Load a MAD File in the current directoryOSErr	MADLoadMusicRsrc( OSType IDName, short IDNo);				// Load a MAD Rsrc into memoryOSErr	MADLoadMusicPtr( Ptr myPtr);								// Load a MAD Ptr into memory, you can DisposPtr your Ptr after this callOSErr	MADLoadMusicPartition( MADPartition *aPartition);			// Load a MAD partition into memoryOSErr	MADImportMusicFile( OSType plugType, Str255 fName);			// Import a non-MAD music file with plugsOSErr	MADMusicIdentify( OSType *type, Str255 fName);				// Identify what kind of music format is fName file.Boolean	MADPlugAvailable( OSType type);								// Is plug 'type' available?OSErr	MADDisposeMusic(void);										// Dispose the current music, use it after RLoadMusic(), RLoadMusicRsrc(), RInstallMADF()void	MADChangeTracks( short);									// Change current tracks number of the music drivervoid	MADCleanDriver();											// Clean the driver : stop playing soundsCmd*	GetMADCommand(	short		position,						// Extract a Command from a PatData structure						short		channel,						PatData*	aPatData);OSErr	MADPlaySndHandle( 	Handle sound,							// Handle to a 'snd ' handle, by ex: GetResource('snd ', 128);							long chan,								// channel ID on which to play sound							long note);								// note: 0 to NUMBER_NOTES or 0xFF: play sound at his normal sampleRate KhzOSErr	MADPlaySoundData(	Ptr				soundPtr,				// Sound Pointer to data							long			size,					// Sound size in bytes							long			channel,				// channel ID on which to play sound							long			note,					// note: 0 to NUMBER_NOTES or 0xFF: play sound at 22 Khz							long			amplitude,				// 8 or 16 bits							long			loopBeg,				// loop beginning							long			loopSize,				// loop size in bytes							unsigned long	rate);					// sample rate of the sound data, by ex: rate22khz#ifdef __cplusplus}#endif/********************						***********************/////	Player PRO 4.5x -- Plug IMPORT / EXPORT Definition////	Version 2.0////	To use with PlayerPRO for Think C & CodeWarrior////	Antoine ROSSET//	16 Tranchees//	1206 GENEVA//	SWITZERLAND//	//	FAX:			(+41 22) 346 11 97//	Compuserve:		100277,164//	Internet: 		rosset@dial.eunet.ch////	Your main function have to be in this form://	OSErr main( OSType order, FSSpec *AlienFileFSSpec, MADPartition *MadFile, PPInfoRec *info);////	Actual plug have to support these orders:////	order: 'TEST':	check the AlienFile to see if your Plug really support it.//	order: 'IMPT':	convert the AlienFile into a MADPartition. You have to allocate MADPartition.//	order: 'INFO':	Fill PPInfoRec structure.//	order: 'EXPT':	Convert the MADPartition into AlienFile. You have to allocate AlienFile.//				Don't delete the MADPartition Structure after conversion !!////	An IMPORT plug have to support these orders: 'TEST', 'IMPT', 'INFO'//	An EXPORT plug have to support these orders: 'EXPT'// 	An IMPORT/EXPORT plug have to support these orders: 'TEST', 'IMPT', 'INFO', 'EXPT'////	About Resources:////	Your Plug should have: Creator: 'SNPL', Type: 'IMPL'////	Your Plug have to have these resources:////	- One segment CODE 1000 with 68k Code//	- One segment PPCC 1000 with PPC Code (OPTIONAL: if PlayerPRO in PPC cannot find it, it will use the CODE 1000 resource)//	- One STR# resource :////		1 string: which kind of files your plug support (OSType value!!!) By example: 'STrk', '669 ', etc...//		2 string: what does your Plug: EXPL : only Export files, IMPL : only Import Files, EXIM : import AND export.//		3 string: string that will be used in Import and Export menu of PlayerPRO//		4 string: Copyright string of this plug.///********************						***********************/struct PPInfoRec{	Str63		internalFileName;	Str63		formatDescription;		long		totalPatterns;	long		partitionLength;		short		totalTracks;	short		totalInstruments;		OSType		signature;		long		fileSize;	};typedef struct PPInfoRec PPInfoRec;#if defined(powerc) || defined (__powerc)#pragma options align=reset#else#if !defined(THINK_C)#pragma options align=reset#endif#endif#endif